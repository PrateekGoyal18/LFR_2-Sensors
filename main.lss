
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000049  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d7  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007d  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000130  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008c  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <forward>:
#include<avr/io.h>

void forward()
{
  PORTC&=~(1<<0);
  6c:	a8 98       	cbi	0x15, 0	; 21
  PORTC|=(1<<1);
  6e:	a9 9a       	sbi	0x15, 1	; 21
  PORTC&=~(1<<2);
  70:	aa 98       	cbi	0x15, 2	; 21
  PORTC|=(1<<3);
  72:	ab 9a       	sbi	0x15, 3	; 21
}
  74:	08 95       	ret

00000076 <left>:

void left()
{
  PORTC&=~(1<<1);
  76:	a9 98       	cbi	0x15, 1	; 21
  PORTC|=(1<<0);
  78:	a8 9a       	sbi	0x15, 0	; 21
  PORTC&=~(1<<2);  
  7a:	aa 98       	cbi	0x15, 2	; 21
  PORTC|=(1<<3);
  7c:	ab 9a       	sbi	0x15, 3	; 21
}
  7e:	08 95       	ret

00000080 <right>:

void right()
{
  PORTC&=~(1<<0);
  80:	a8 98       	cbi	0x15, 0	; 21
  PORTC|=(1<<1);
  82:	a9 9a       	sbi	0x15, 1	; 21
  PORTC&=~(1<<3);
  84:	ab 98       	cbi	0x15, 3	; 21
  PORTC|=(1<<2);
  86:	aa 9a       	sbi	0x15, 2	; 21
}
  88:	08 95       	ret

0000008a <motor_init>:

void motor_init()
{
  DDRC=0B00001111;
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	84 bb       	out	0x14, r24	; 20
}
  8e:	08 95       	ret

00000090 <main>:
  PORTC|=(1<<2);
}

void motor_init()
{
  DDRC=0B00001111;
  90:	8f e0       	ldi	r24, 0x0F	; 15
  92:	84 bb       	out	0x14, r24	; 20
}

int main()
{
  motor_init();
  DDRA=0X00;
  94:	1a ba       	out	0x1a, r1	; 26
  PORTA=0XFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8b bb       	out	0x1b, r24	; 27
  while(1)
  {
    if((!(PINA&(3<<0)))==0X03)
  9a:	89 b3       	in	r24, 0x19	; 25
    forward();
	
    else if
	((!(PINA&(3<<0)))==0X02)
  9c:	89 b3       	in	r24, 0x19	; 25
    left();
	
    else if((!(PINA&(3<<0)))==0X01)
  9e:	89 b3       	in	r24, 0x19	; 25
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	83 70       	andi	r24, 0x03	; 3
  a4:	90 70       	andi	r25, 0x00	; 0
  a6:	89 2b       	or	r24, r25
  a8:	c1 f7       	brne	.-16     	; 0x9a <main+0xa>
    right();
  aa:	0e 94 40 00 	call	0x80	; 0x80 <right>
  ae:	f5 cf       	rjmp	.-22     	; 0x9a <main+0xa>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
